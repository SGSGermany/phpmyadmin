name: Periodically rebuild & publish containers (auto update)

on:
  schedule:
    # run four times a day on 05:37 UTC, 11:37 UTC, 17:37 UTC and 23:37 UTC
    - cron: '37 5,11,17,23 * * *'

concurrency: build

env:
  GIT_REMOTE_URL: ${{ github.server_url }}/${{ github.repository }}.git
  CI_TOOLS_SETUP: https://raw.githubusercontent.com/SGSGermany/ci-tools/main/setup.sh

jobs:
  generate-jobs:
    name: Generate jobs

    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      BUILD_MATRIX: ${{ steps.generate-jobs.outputs.BUILD_MATRIX }}

    env:
      RUN_ON_BRANCHES: 'main'

    steps:
      - name: Setup CI tools
        run: |
          . <(curl -fsS -L "$CI_TOOLS_SETUP" | bash -s ~/ci-tools "5f1fd47b7be27639652e19acb37af3b2d2db8a33")
          echo "CI_TOOLS_PATH=$CI_TOOLS_PATH" | tee -a "$GITHUB_ENV"

      - name: Generate jobs
        id: generate-jobs
        run: |
          BUILD_REF="$("$CI_TOOLS_PATH/containers/generate-scheduled-jobs.sh")"
          
          echo ::group::Jobs list
          echo "$BUILD_REF"
          echo ::endgroup::
          
          echo "::set-output name=BUILD_MATRIX::$(echo "$BUILD_REF" | jq -R . | jq -c -s '{"BUILD_REF": .}')"

  build:
    name: Build & publish container

    needs: generate-jobs

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix: ${{ fromJSON(needs.generate-jobs.outputs.BUILD_MATRIX) }}
      fail-fast: false
      max-parallel: 1

    env:
      REGISTRY: ghcr.io
      OWNER: sgsgermany
      IMAGE: phpmyadmin
      BUILD_REF: ${{ matrix.BUILD_REF }}

    steps:
      - name: Setup CI tools
        run: |
          . <(curl -fsS -L "$CI_TOOLS_SETUP" | bash -s ~/ci-tools "5f1fd47b7be27639652e19acb37af3b2d2db8a33")
          echo "CI_TOOLS_PATH=$CI_TOOLS_PATH" | tee -a "$GITHUB_ENV"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BUILD_REF }}

      - name: Log into container registry ${{ env.REGISTRY }}
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for updates
        run: |
          BUILD_ACTION="$(./check-for-updates.sh)"
          echo "BUILD_ACTION=$BUILD_ACTION" | tee -a "$GITHUB_ENV"

      - name: Build container image
        if: ${{ env.BUILD_ACTION != '' }}
        run: |
          buildah unshare ./build.sh

      - name: Generate container image tags
        if: ${{ env.BUILD_ACTION != '' }}
        run: |
          source <(./tags.sh)
          echo "VERSION=$VERSION" | tee -a "$GITHUB_ENV"
          echo "TAGS=${TAGS:-latest}" | tee -a "$GITHUB_ENV"

      - name: Add container image tags
        if: ${{ env.BUILD_ACTION != '' }}
        run: |
          "$CI_TOOLS_PATH/containers/add-image-tags.sh" "latest"

      - name: Container image metadata
        run: |
          podman image inspect "$IMAGE:latest"

      - name: Push container image
        if: ${{ env.BUILD_ACTION != '' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.IMAGE }}
          registry: ${{ env.REGISTRY }}/${{ env.OWNER }}
          tags: ${{ env.TAGS }}
